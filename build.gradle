apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'application'
apply plugin: 'groovy'

buildscript {
    repositories {
        maven {
            url "http://repo1.maven.org/maven2/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven { url 'http://repo.spring.io/plugins-release' }
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        def verSpringboot = "1.4.5.RELEASE"
        // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-gradle-plugin
        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: verSpringboot
        classpath 'org.sonarqube.gradle:gradle-sonarqube-plugin:1.0'  //開発時のみ必要
        classpath 'org.springframework:springloaded:1.2.5.RELEASE' //開発時のみ必要
        classpath 'org.owasp:dependency-check-gradle:latest.release'
    }
}


configurations {
    testJMockit
}

dependencies {

    // https://mvnrepository.com/artifact/org.jmockit/jmockit
    testJMockit 'org.jmockit:jmockit:1.24'

    testCompile configurations.testJMockit.dependencies

    // https://mvnrepository.com/artifact/junit/junit
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

test {
    jvmArgs "-javaagent:${configurations.testJMockit.asPath}"
    jacoco {
        excludes = ["**/bean/"]
    }
}

applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"
                             , "-Djava.net.preferIPv4Stack=true"
                             , "-Djava.net.preferIPv6Addresses=false"
                             ,"-Dnetworkaddress.cache.ttl=0"
                             ,"-Dnetworkaddress.cache.negative.ttl=0"]

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")

    }
}

sourceSets {


}
// Setup dependencies for integration testing
dependencies {
    // Dependency for integration test
    testCompile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    testCompile "org.codehaus.gpars:gpars:1.2.1"

    // optional dependencies for using Spock
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    testRuntime "cglib:cglib-nodep:3.1"          // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.1"    // allows mocking of classes without default constructor (together with CGLIB)

    integrationTestCompile sourceSets.main.output
    integrationTestCompile sourceSets.test.output
    integrationTestCompile configurations.testCompile
    integrationTestRuntime configurations.testRuntime
}

